#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: gateway-ingress
#  namespace: istio-system
#  annotations:
#    kubernetes.io/ingress.class: istio2
#    kubernetes.io/tls-acme: "true"
#    cert-manager.io/cluster-issuer: letsencrypt-staging # This should match the ClusterIssuer created
#    # cert-manager.io/issuer: letsencrypt-prod # In case you choose Issuer instead of ClusterIssuer
#spec:
#  ingressClassName: istio2
#  rules:
#    - host: grafana.missionk8s.xyz
#      http:
#        paths:
#          - path: /
#            pathType: Prefix
#            backend:
#              service:
#                name: production-grafana
#                port:
#                  number: 80
#  tls:
#    - hosts:
#        # - "*.example.com" # Example of wildcard
#        - grafana.missionk8s.xyz
#      secretName: grafana-cert
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  namespace: istio-system
spec:
  acme:
    email: raaz.adarsh@gmail.com
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource that will be used to store the account's private key.
      name: letsencrypt-staging-key
    # Add a single challenge solver, HTTP01 using nginx
    solvers:
      - dns01:
          route53:
            region: us-east-1
            hostedZoneID: Z033701123QS41CH58UNR
        selector:
          dnsZones:
            - missionk8s.xyz
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: grafana-cert
  namespace: istio-system
spec:
  secretName: grafana-tls
  commonName: grafana.missionk8s.xyz
  dnsNames:
    - grafana.missionk8s.xyz
  issuerRef:
    name: letsencrypt-staging
    kind: ClusterIssuer
